from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from db import connect_db, HELP_TABLE, INFO_TABLE, POST_TABLE
import os
import re
import gc
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def markdown_to_html(text):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MarkdownV2 –≤ HTML –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram"""
    text = re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", text)  # –ñ–∏—Ä–Ω—ã–π ‚Üí <b>–ñ–∏—Ä–Ω—ã–π</b>
    text = re.sub(r"\*(.*?)\*", r"<i>\1</i>", text)  # *–ö—É—Ä—Å–∏–≤* ‚Üí <i>–ö—É—Ä—Å–∏–≤</i>

    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å—Å—ã–ª–æ–∫ [–¢–µ–∫—Å—Ç](https://example.com) ‚Üí <a href="URL">–¢–µ–∫—Å—Ç</a>
    text = re.sub(r"\[(.*?)\]\((https?:\/\/[^\)]+)\)", r'<a href="\2">\1</a>', text)

    text = text.replace("|", "\n")  # Telegram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç \n –≤–º–µ—Å—Ç–æ |

    return text

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    start_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ **WuJiXing Telegram Bot** üöÄ"
    start_text = markdown_to_html(start_text)  # ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MarkdownV2 ‚Üí HTML
    await update.message.reply_text(start_text, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
async def send_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = await connect_db()
    async with pool.acquire() as conn:
        rows = await conn.fetch(f"SELECT command, response FROM {HELP_TABLE}")
    await pool.close()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å –ë–î
    gc.collect()  # ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    
    if rows:
        help_text = "\n".join([f"{row['command']}: {row['response']}" for row in rows])
        help_text = markdown_to_html(help_text)  # ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MarkdownV2 ‚Üí HTML
        await update.message.reply_text(help_text, parse_mode="HTML")
    else:
        await update.message.reply_text("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥.")

# –ö–æ–º–∞–Ω–¥–∞ /info - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def send_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = await connect_db()
    async with pool.acquire() as conn:
        rows = await conn.fetch(f"SELECT topic, description FROM {INFO_TABLE}")
    await pool.close()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å –ë–î
    gc.collect()  # ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    
    if rows:
        info_text = "\n".join([f"{row['topic']}: {row['description']}" for row in rows])
        info_text = markdown_to_html(info_text)  # ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MarkdownV2 ‚Üí HTML
        await update.message.reply_text(info_text, parse_mode="HTML")
    else:
        await update.message.reply_text("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


# –ö–æ–º–∞–Ω–¥–∞ /random - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async def send_random_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("üì° –í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /random")
    pool = await connect_db()
    if not pool:
        logging.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π!")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    async with pool.acquire() as conn:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç —Å —É—á—ë—Ç–æ–º —è–∑—ã–∫–∞
        row = await conn.fetchrow(f"SELECT id, thread, language, date FROM posts WHERE language = 'ru' ORDER BY RANDOM() LIMIT 1") 

        if not row:
            logging.error("‚ùå –û—à–∏–±–∫–∞: SQL-–∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É!")
            await update.message.reply_text("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.")
            return
        
        post_id = row["id"]
        thread_id = row["thread"]
        language = row["language"]
        post_date = row["date"]

        if thread_id == 0:  # –û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ—Å—Ç
            post = await conn.fetchrow(f"SELECT content, category FROM posts WHERE id = {post_id} AND language = '{language}'")
            content = markdown_to_html(post["content"])
            category = post["category"]
            await update.message.reply_text(f"{content}\n\n#WuJiXing #{category}", parse_mode="HTML")
        
        else:  # –ü–æ—Å—Ç –≤ —Ç—Ä–µ–¥–µ (–¥–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ!)
            posts = await conn.fetch(f"""
                SELECT content, position, category FROM posts 
                WHERE thread = {thread_id} AND language = '{language}' AND date = '{post_date}'
                ORDER BY position
            """)
            category = posts[-1]["category"]  # –ë–µ—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞

            for i, post in enumerate(posts):
                content = markdown_to_html(post["content"])
                if i == len(posts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –≤ —Ç—Ä–µ–¥–µ
                    content += f"\n\n#WuJiXing #{category}"
                await update.message.reply_text(content, parse_mode="HTML")

    await pool.close()
    
def register_handlers(bot_builder):
    bot_builder.add_handler(CommandHandler("start", start))
    bot_builder.add_handler(CommandHandler("help", send_help))
    bot_builder.add_handler(CommandHandler("info", send_info))
    bot_builder.add_handler(CommandHandler("random", send_random_post))
