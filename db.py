import asyncpg
import os

HELP_TABLE = os.getenv("HELP_TABLE", "help")
INFO_TABLE = os.getenv("INFO_TABLE", "info")
POST_TABLE = os.getenv("POST_TABLE", "post")

async def connect_db():
    """ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL """
    return await asyncpg.create_pool(os.getenv('DATABASE_URL'))

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ WuJiXing Telegram Bot üöÄ")

# –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏

async def send_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = await connect_db()
    async with pool.acquire() as conn:
        rows = await conn.fetch(f"SELECT command, response FROM {HELP_TABLE}")
    if rows:
        help_text = "\n".join([f"{row['command']}: {row['response']}" for row in rows])
        await update.message.reply_text(help_text)
    else:
        await update.message.reply_text("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥.")
        
async def send_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = await connect_db()
    async with pool.acquire() as conn:
        rows = await conn.fetch(f"SELECT topic, description FROM {INFO_TABLE}")
    info_text = "\n".join([f"{row['topic']}: {row['description']}" for row in rows])
    await update.message.reply_text(info_text)
import re

def markdown_to_html(text):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MarkdownV2 –≤ HTML –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram"""
    text = re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", text)  # –ñ–∏—Ä–Ω—ã–π ‚Üí <b>–ñ–∏—Ä–Ω—ã–π</b>
    text = re.sub(r"\*(.*?)\*", r"<i>\1</i>", text)  # *–ö—É—Ä—Å–∏–≤* ‚Üí <i>–ö—É—Ä—Å–∏–≤</i>

    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å—Å—ã–ª–æ–∫ [–¢–µ–∫—Å—Ç](https://example.com) ‚Üí <a href="URL">–¢–µ–∫—Å—Ç</a>
    text = re.sub(r"\[(.*?)\]\((https?:\/\/[^\)]+)\)", r'<a href="\2">\1</a>', text)

    text = text.replace("|", "\n")  # Telegram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç \n –≤–º–µ—Å—Ç–æ |

    return text

async def send_random_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram"""
    pool = await connect_db()
    async with pool.acquire() as conn:
        row = await conn.fetchrow(f"SELECT content FROM posts WHERE lang = 'ru' ORDER BY RANDOM() LIMIT 1")

    if row:
        text = markdown_to_html(row['content'])  # ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MarkdownV2 ‚Üí HTML
        await update.message.reply_text(text, parse_mode="HTML")  # ‚úÖ Telegram –ø–æ–π–º—ë—Ç —Ñ–æ—Ä–º–∞—Ç
    else:
        await update.message.reply_text("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.")
        
bot_builder.add_handler(CommandHandler("start", start))
bot_builder.add_handler(CommandHandler("help", send_help))
bot_builder.add_handler(CommandHandler("info", send_info))
bot_builder.add_handler(CommandHandler("random", send_random_post))
